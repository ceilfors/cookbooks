#!/bin/env ruby
# Cron backup script for MySQL Manager.
# This script is shared for both master and slave DBs...they will be executed
# differently depending on the instance being a master or a slave at the time.

require 'rubygems'
require 'optparse' 

require '/var/spool/ec2/user-data.rb'
require '/var/spool/ec2/meta-data.rb'

#set RS_DISTRO
ENV['RS_DISTRO'] = `lsb_release -is`.chomp.downcase

runfile="@@RUN_FILE@@"

# Required inputs: (must be substituted before installing this template)
backup_snap_prefix='@@EBS_BACKUP_PREFIX@@'
ebs_mount_point='@@EBS_MOUNT_POINT@@'

def error(message)
  puts "#{message} ... aborting backup"
  #TODO: Send an email to the admin....
  exit(-1)
end

def usage(code=0)
  out = $0.split(' ')[0] + " usage: \n"
  out << "  -m | --max_snapshots MAXSNAPSHOTS  Maximum number of completed snapshots to keep (i.e., rotation size) \n"
  out << "  -D | --keep_daily KEEPDAILY Number of completed daily snapshots to keep (i.e., rotation size) \n"
  out << "  -W | --keep_weekly  KEEPWEEKLY Number of completed weekly snapshots to keep (i.e., rotation size) \n"
  out << "  -M | --keep_monthly  KEEPMONTHLY Number of completed monthly snapshots to keep (i.e., rotation size) \n"
  out << "  -Y | --keep_yearly  KEEPYEARLY Number of completed yearly snapshots to keep (i.e., rotation size) \n"
  out << "  [ --help ]   "
  puts out
  Kernel.exit( code )
end

######Options handling
#Default options
options = {}

opts = OptionParser.new 
opts.on("--help") { raise "Usage:" } 
opts.on("-m=MAXSNAPSHOTS", "--max-snapshots=MAXSNAPSHOTS","Maximum number of completed snapshots to keep (i.e., rotation size)") {|str| options[:max_snapshots] = str.to_i }
opts.on("-D=KEEPDAILY", "--keep_daily=KEEPDAILY","Number of completed snapshots to keep (i.e., rotation size)") {|str| options[:keep_daily] = str.to_i }
opts.on("-W=KEEPWEEKLY", "--keep_weekly=KEEPWEEKLY","Number of completed snapshots to keep (i.e., rotation size)") {|str| options[:keep_weekly] = str.to_i }
opts.on("-M=KEEPMONTHLY", "--keep_monthly=KEEPMONTHLY","Number of completed snapshots to keep (i.e., rotation size)") {|str| options[:keep_monthly] = str.to_i }
opts.on("-Y=KEEPYARLY", "--keep_yearly=KEEPYARLY","Number of completed snapshots to keep (i.e., rotation size)") {|str| options[:keep_yearly] = str.to_i }

begin
  opts.parse(ARGV) 
rescue Exception => e
  puts e 
  usage(-1) 
end

if ! options[:max_snapshots] || options[:max_snapshots]==0
   puts "Invalid number for max snapshots"
   usage(-1)
end


puts "=========  Starting New Backup ========="
puts Time.now
# 1- Prepare the backup parameters 
cmd_params=""
keep_params = "-D #{options[:keep_daily]} -W #{options[:keep_weekly]} -M #{options[:keep_monthly]} -Y #{options[:keep_yearly]}"
puts "#{keep_params}"
backupfile_date=`date +%Y%m%d%H%M`.strip
cmd_params = "-s \'#{backupfile_date}\' -l \'#{backup_snap_prefix}\' -n \'#{backup_snap_prefix}\'  -c \'#{backup_snap_prefix}\' -t 'rs_snapshot' -p #{ebs_mount_point} -m #{options[:max_snapshots]} #{keep_params}"

# Execute the backup command
puts "/opt/rightscale/ebs/backupEBS_stripe.rb #{cmd_params}" 
result = `/opt/rightscale/ebs/backupEBS_stripe.rb #{cmd_params}`
puts result

if $? != 0
   puts "Backup execution failed"
   exit(-1)
end

puts "Backup executed successfully."
now = Time.now
puts "#{now}"
`echo #{now} > #{runfile}`
